from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from datetime import datetime, timedelta
import requests
import os
import json
import random
import string
from config import config
from sqlalchemy import text

# === 1. –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ===
db = SQLAlchemy()
login_manager = LoginManager()
login_manager.login_view = 'login'
login_manager.login_message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.'

# === 2. –ú–æ–¥–µ–ª–∏ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç db) ===
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    balance = db.Column(db.Float, default=0.0)
    telegram_username = db.Column(db.String(100), nullable=True)  # @username –±–µ–∑ @
    telegram_chat_id = db.Column(db.String(50), nullable=True)  # chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    is_banned = db.Column(db.Boolean, default=False)  # —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    is_admin = db.Column(db.Boolean, default=False)  # —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    auth_code = db.Column(db.String(6), nullable=True)  # –∫–æ–¥ –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_code_expires = db.Column(db.DateTime, nullable=True)  # –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ–¥–∞
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    products = db.relationship('Product', backref='seller', lazy=True)
    cart_items = db.relationship('CartItem', backref='user', lazy=True)
    
    def __repr__(self):
        return f'<User {self.username}>'

class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text, nullable=True)
    price = db.Column(db.Float, nullable=False)
    image = db.Column(db.String(200), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    seller_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    stock = db.Column(db.Integer, default=0)  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
    
    def __repr__(self):
        return f'<Product {self.name}>'

class CartItem(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)
    quantity = db.Column(db.Integer, default=1)
    product = db.relationship('Product', backref='cart_items')
    
    def __repr__(self):
        return f'<CartItem {self.product.name} x{self.quantity}>'

class Message(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    sender_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    receiver_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=True)  # –°–≤—è–∑—å —Å —Ç–æ–≤–∞—Ä–æ–º
    content = db.Column(db.Text, nullable=False)
    is_read = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # –°–≤—è–∑–∏
    sender = db.relationship('User', foreign_keys=[sender_id], backref='sent_messages')
    receiver = db.relationship('User', foreign_keys=[receiver_id], backref='received_messages')
    product = db.relationship('Product', backref='messages')
    
    def __repr__(self):
        return f'<Message from {self.sender.username} to {self.receiver.username}>'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# === 3. –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def create_app(config_name='default'):
    app = Flask(__name__)
    app.config.from_object(config[config_name])
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    db.init_app(app)
    login_manager.init_app(app)
    return app

# === 4. –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
app = create_app()

# === Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ===
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.environ.get('TELEGRAM_CHAT_ID', '1172834372')  # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_BOT_TOKEN:
    print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    print("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render")
    print("üì± Telegram —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    TELEGRAM_BOT_TOKEN = None
else:
    print(f"‚úÖ TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {TELEGRAM_BOT_TOKEN[:10]}...")

def send_telegram_message(text: str, chat_id: str = None, keyboard: dict = None) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
        return False
        
    try:
        target_chat_id = chat_id or TELEGRAM_CHAT_ID
        print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ chat_id: {target_chat_id}")
        
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': target_chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if keyboard:
            payload['reply_markup'] = json.dumps(keyboard)
        
        print(f"üì§ Telegram –∑–∞–ø—Ä–æ—Å: {url}")
        print(f"üìã –î–∞–Ω–Ω—ã–µ: {payload}")
        
        # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫: —Ç–∞–π–º–∞—É—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ
        response = requests.post(url, data=payload, timeout=10)
        response_data = response.json()
        
        print(f"üì• Telegram –æ—Ç–≤–µ—Ç: {response_data}")
        
        if response_data.get('ok'):
            print(f"‚úÖ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå Telegram –æ—à–∏–±–∫–∞: {response_data}")
            return False
            
    except Exception as e:
        print(f"‚ùå Telegram send error: {e}")
        return False

def edit_telegram_message(text: str, chat_id: str, message_id: int, keyboard: dict = None) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return
        
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/editMessageText"
        payload = {
            'chat_id': chat_id,
            'message_id': message_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if keyboard:
            payload['reply_markup'] = json.dumps(keyboard)
        
        response = requests.post(url, data=payload, timeout=5)
        if not response.json().get('ok'):
            print(f"Telegram edit error: {response.json()}")
    except Exception as e:
        print(f"Telegram edit error: {e}")

def answer_callback_query(callback_query_id: str, text: str = None) -> None:
    """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ callback query"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç")
        return
        
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/answerCallbackQuery"
        payload = {
            'callback_query_id': callback_query_id
        }
        
        if text:
            payload['text'] = text
        
        response = requests.post(url, data=payload, timeout=5)
        if not response.json().get('ok'):
            print(f"Telegram callback answer error: {response.json()}")
    except Exception as e:
        print(f"Telegram callback answer error: {e}")

def send_order_notification(items_details, total_amount: float, buyer_name: str) -> None:
    lines = [f"üõí –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{buyer_name}</b>"]
    lines.append("")
    lines.append("–¢–æ–≤–∞—Ä—ã:")
    for d in items_details:
        lines.append(f"‚Ä¢ {d['name']} ‚Äî {d['qty']} —à—Ç √ó {d['price']:.2f}‚ÇΩ = {d['line_total']:.2f}‚ÇΩ")
    lines.append("")
    lines.append(f"–ò—Ç–æ–≥–æ: <b>{total_amount:.2f}‚ÇΩ</b>")
    text = "\n".join(lines)
    send_telegram_message(text)

def send_admin_notification(message: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    admin_chat_id = "1172834372"  # ID –∞–¥–º–∏–Ω–∞
    send_telegram_message(message, admin_chat_id)

def send_seller_notification(product_name: str, quantity: int, price: float, buyer_name: str, seller_telegram: str, seller_chat_id: str = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É –æ –ø–æ–∫—É–ø–∫–µ –µ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    if not seller_chat_id:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É {seller_telegram}: –Ω–µ—Ç chat_id. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ @NexusDarkBot")
        return  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å chat_id
    
    lines = [f"üí∞ <b>–í–∞—à —Ç–æ–≤–∞—Ä –∫—É–ø–ª–µ–Ω!</b>"]
    lines.append("")
    lines.append(f"–¢–æ–≤–∞—Ä: <b>{product_name}</b>")
    lines.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç")
    lines.append(f"–¶–µ–Ω–∞ –∑–∞ —à—Ç—É–∫—É: {price:.2f}‚ÇΩ")
    lines.append(f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <b>{buyer_name}</b>")
    lines.append("")
    lines.append(f"–°—É–º–º–∞: <b>{price * quantity:.2f}‚ÇΩ</b>")
    
    text = "\n".join(lines)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ chat_id
    send_telegram_message(text, seller_chat_id)


def generate_auth_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return ''.join(random.choices(string.digits, k=6))

def send_auth_code_to_telegram(user, auth_code):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telegram"""
    if not TELEGRAM_BOT_TOKEN:
        print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞")
        return False
        
    if not user.telegram_chat_id:
        return False
    
    message = f"üîê <b>–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
    message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user.username}</code>\n"
    message += f"üî¢ –ö–æ–¥: <code>{auth_code}</code>\n\n"
    message += f"‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç\n"
    message += f"üìã –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–¥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': user.telegram_chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, data=payload, timeout=5)
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤ Telegram: {e}")
        return False

def ensure_schema():
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    with app.app_context():
        try:
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            print("üîÑ Creating database tables...")
            db.create_all()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ message —Å–æ–∑–¥–∞–Ω–∞
            try:
                message_count = Message.query.count()
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ Message —Å–æ–∑–¥–∞–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π Message: {e}")
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤—Ä—É—á–Ω—É—é —Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL
                try:
                    db_type = db.engine.url.drivername
                    print(f"üóÑÔ∏è Database type: {db_type}")
                    
                    if 'postgresql' in db_type:
                        print("üóÑÔ∏è Creating message table for PostgreSQL...")
                        db.session.execute(text("""
                            CREATE TABLE IF NOT EXISTS message (
                                id SERIAL PRIMARY KEY,
                                sender_id INTEGER NOT NULL,
                                receiver_id INTEGER NOT NULL,
                                product_id INTEGER,
                                content TEXT NOT NULL,
                                is_read BOOLEAN DEFAULT FALSE,
                                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                            )
                        """))
                        db.session.commit()
                        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ Message —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è PostgreSQL")
                    else:
                        print("üóÑÔ∏è SQLite detected - using db.create_all()")
                        # –î–ª—è SQLite –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º db.create_all()
                        pass
                except Exception as e2:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É Message: {e2}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            db_type = db.engine.url.drivername
            print(f"üóÑÔ∏è Database type: {db_type}")
            
            if 'postgresql' in db_type:
                print("üóÑÔ∏è Using PostgreSQL - checking and adding columns")
                # –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º information_schema
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã user
                    db.session.execute(text("""
                        DO $$ 
                        BEGIN
                            -- –î–æ–±–∞–≤–ª—è–µ–º auth_code –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                                          WHERE table_name = 'user' AND column_name = 'auth_code') THEN
                                ALTER TABLE "user" ADD COLUMN auth_code VARCHAR(6);
                            END IF;
                            
                            -- –î–æ–±–∞–≤–ª—è–µ–º auth_code_expires –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                                          WHERE table_name = 'user' AND column_name = 'auth_code_expires') THEN
                                ALTER TABLE "user" ADD COLUMN auth_code_expires TIMESTAMP;
                            END IF;
                            
                            -- –î–æ–±–∞–≤–ª—è–µ–º stock –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                                          WHERE table_name = 'product' AND column_name = 'stock') THEN
                                ALTER TABLE "product" ADD COLUMN stock INTEGER DEFAULT 0;
                            END IF;
                        END $$;
                    """))
                    print("‚úÖ PostgreSQL columns added successfully")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è PostgreSQL column addition failed: {e}")
            else:
                # –î–ª—è SQLite –∏—Å–ø–æ–ª—å–∑—É–µ–º PRAGMA
                print("üóÑÔ∏è Using SQLite - checking columns")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É product
                try:
                    res = db.session.execute(text("PRAGMA table_info(product)"))
                    cols = [row[1] for row in res]
                    if 'stock' not in cols:
                        print("üîÑ Adding stock column to product table")
                        db.session.execute(text("ALTER TABLE product ADD COLUMN stock INTEGER DEFAULT 0"))
                except Exception as e:
                    print(f"‚ö†Ô∏è Product table check failed: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user
                try:
                    res = db.session.execute(text("PRAGMA table_info(user)"))
                    cols = [row[1] for row in res]
                    print(f"üìã Current user table columns: {cols}")
                    
                    if 'telegram_username' not in cols:
                        print("üîÑ Adding telegram_username column to user table")
                        db.session.execute(text("ALTER TABLE user ADD COLUMN telegram_username VARCHAR(100)"))
                    if 'telegram_chat_id' not in cols:
                        print("üîÑ Adding telegram_chat_id column to user table")
                        db.session.execute(text("ALTER TABLE user ADD COLUMN telegram_chat_id VARCHAR(50)"))
                    if 'is_banned' not in cols:
                        print("üîÑ Adding is_banned column to user table")
                        db.session.execute(text("ALTER TABLE user ADD COLUMN is_banned BOOLEAN DEFAULT 0"))
                    if 'is_admin' not in cols:
                        print("üîÑ Adding is_admin column to user table")
                        db.session.execute(text("ALTER TABLE user ADD COLUMN is_admin BOOLEAN DEFAULT 0"))
                    if 'auth_code' not in cols:
                        print("üîÑ Adding auth_code column to user table")
                        db.session.execute(text("ALTER TABLE user ADD COLUMN auth_code VARCHAR(6)"))
                    if 'auth_code_expires' not in cols:
                        print("üîÑ Adding auth_code_expires column to user table")
                        db.session.execute(text("ALTER TABLE user ADD COLUMN auth_code_expires DATETIME"))
                except Exception as e:
                    print(f"‚ö†Ô∏è User table check failed: {e}")
            
            db.session.commit()
            print("‚úÖ Database schema migration completed")
        except Exception as e:
            print(f"‚ùå Database migration error: {e}")
            # –ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
            pass

with app.app_context():
    # –í—ã–ø–æ–ª–Ω–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ö–µ–º—ã –Ω–∞ —ç—Ç–∞–ø–µ –∏–º–ø–æ—Ä—Ç–∞ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Flask>=3)
    ensure_schema()

# === 5. –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä ===
@app.context_processor
def inject_cart_data():
    if current_user.is_authenticated:
        cart_items = CartItem.query.filter_by(user_id=current_user.id).all()
        cart_count = len(cart_items)
        cart_total = sum(item.product.price * item.quantity for item in cart_items)
        return dict(cart_items=cart_items, cart_count=cart_count, cart_total=cart_total)
    return dict(cart_items=[], cart_count=0, cart_total=0)

# === 6. –ú–∞—Ä—à—Ä—É—Ç—ã ===
@app.route('/')
def index():
    return redirect(url_for('market'))

@app.route('/market')
def market():
    products = Product.query.order_by(Product.created_at.desc()).all()
    return render_template('market.html', products=products)

# ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: login, register, logout, profile, add_product, cart, checkout –∏ —Ç.–¥.)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('market'))
    
    if request.method == 'POST':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–¥ –≤ –∑–∞–ø—Ä–æ—Å–µ (–≤—Ç–æ—Ä–∞—è —Å—Ç–∞–¥–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        auth_code = request.form.get('auth_code', '').strip()
        
        if auth_code:
            # –í—Ç–æ—Ä–∞—è —Å—Ç–∞–¥–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
            username = request.form.get('username', '').strip()
            user = User.query.filter_by(username=username).first()
            
            if user and user.auth_code and user.auth_code_expires:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥
                if datetime.utcnow() <= user.auth_code_expires:
                    if user.auth_code == auth_code:
                        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π, –≤—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
                        if user.is_banned:
                            flash('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
                        else:
                            # –û—á–∏—â–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                            user.auth_code = None
                            user.auth_code_expires = None
                            db.session.commit()
                            
                            login_user(user)
                            next_page = request.args.get('next')
                            return redirect(next_page) if next_page else redirect(url_for('market'))
                    else:
                        flash('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
                else:
                    flash('–ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.')
                    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥
                    user.auth_code = None
                    user.auth_code_expires = None
                    db.session.commit()
            else:
                flash('–ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.')
        else:
            # –ü–µ—Ä–≤–∞—è —Å—Ç–∞–¥–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
            username = request.form.get('username', '').strip()
            password = request.form.get('password', '')
            
            if not username or not password:
                flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
                return render_template('login.html')
            
            user = User.query.filter_by(username=username).first()
            if user and check_password_hash(user.password_hash, password):
                if user.is_banned:
                    flash('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
                    if user.is_admin:
                        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º 2FA
                        auth_code = generate_auth_code()
                        user.auth_code = auth_code
                        user.auth_code_expires = datetime.utcnow() + timedelta(minutes=5)
                        db.session.commit()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ Telegram
                        if send_auth_code_to_telegram(user, auth_code):
                            flash('–ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∏–∂–µ.')
                            return render_template('login.html', show_code_input=True, username=username)
                        else:
                            flash('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.')
                            # –û—á–∏—â–∞–µ–º –∫–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            user.auth_code = None
                            user.auth_code_expires = None
                            db.session.commit()
                    else:
                        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –æ–±—ã—á–Ω—ã–π –≤—Ö–æ–¥
                        login_user(user)
                        next_page = request.args.get('next')
                        return redirect(next_page) if next_page else redirect(url_for('market'))
            else:
                flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('market'))
    if request.method == 'POST':
        username = request.form.get('username', '').strip()
        email = request.form.get('email', '').strip()
        password = request.form.get('password', '')
        confirm_password = request.form.get('confirm_password', '')
        if not all([username, email, password, confirm_password]):
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è')
            return render_template('register.html')
        if len(username) < 3:
            flash('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞')
            return render_template('register.html')
        if len(password) < 6:
            flash('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤')
            return render_template('register.html')
        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
            return render_template('register.html')
        if User.query.filter_by(username=username).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return render_template('register.html')
        if User.query.filter_by(email=email).first():
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return render_template('register.html')
        user = User(
            username=username,
            email=email,
            password_hash=generate_password_hash(password),
            balance=0
        )
        try:
            db.session.add(user)
            db.session.commit()
            login_user(user)
            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
            return redirect(url_for('market'))
        except Exception as e:
            db.session.rollback()
            flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            return render_template('register.html')
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
    return redirect(url_for('market'))

@app.route('/profile', methods=['GET', 'POST'])
@login_required
def profile():
    if request.method == 'POST':
        telegram_username = request.form.get('telegram_username', '').strip()
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
        if telegram_username.startswith('@'):
            telegram_username = telegram_username[1:]
        
        current_user.telegram_username = telegram_username if telegram_username else None
        try:
            db.session.commit()
            if telegram_username:
                flash(f'Telegram username @{telegram_username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–æ—Ç—É @NexusDarkBot –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start')
            else:
                flash('Telegram username —É–¥–∞–ª–µ–Ω')
        except Exception:
            db.session.rollback()
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è')
    
    return render_template('profile.html')

@app.route('/users')
def users():
    users_list = User.query.order_by(User.created_at.desc()).all()
    return render_template('users.html', users=users_list)

# === –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —á–∞—Ç–∞ ===
@app.route('/chat/<int:product_id>')
@login_required
def chat_with_seller(product_id):
    """–ß–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º —Ç–æ–≤–∞—Ä–∞"""
    print(f"üí¨ –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.id}")
    
    product = Product.query.get_or_404(product_id)
    print(f"üì¶ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {product.name}, –ø—Ä–æ–¥–∞–≤–µ—Ü: {product.seller.username} (ID: {product.seller_id})")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    messages = Message.query.filter(
        ((Message.sender_id == current_user.id) & (Message.receiver_id == product.seller_id)) |
        ((Message.sender_id == product.seller_id) & (Message.receiver_id == current_user.id))
    ).filter(Message.product_id == product_id).order_by(Message.created_at.asc()).all()
    
    print(f"üìù –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
    
    # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    read_count = 0
    for message in messages:
        if message.receiver_id == current_user.id and not message.is_read:
            message.is_read = True
            read_count += 1
    
    if read_count > 0:
        db.session.commit()
        print(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {read_count}")
    
    return render_template('chat.html', product=product, messages=messages)

@app.route('/send_message', methods=['POST'])
@login_required
def send_message():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        print(f"üì® –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {data}")
        
        receiver_id = data.get('receiver_id')
        product_id = data.get('product_id')
        content = data.get('content', '').strip()
        
        print(f"üìä –î–∞–Ω–Ω—ã–µ: receiver_id={receiver_id}, product_id={product_id}, content='{content}'")
        
        if not receiver_id or not content:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç receiver_id –∏–ª–∏ content")
            return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        receiver = User.query.get(receiver_id)
        if not receiver:
            print(f"‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: receiver_id={receiver_id}")
            return jsonify({'success': False, 'message': '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
        
        print(f"‚úÖ –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {receiver.username} (ID: {receiver.id})")
    
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = Message(
            sender_id=current_user.id,
            receiver_id=receiver_id,
            product_id=product_id,
            content=content
        )
        
        print(f"üìù –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç {current_user.id} –∫ {receiver_id}, —Ç–æ–≤–∞—Ä {product_id}")
        
        db.session.add(message)
        db.session.commit()
        
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å ID: {message.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –ø—Ä–æ–¥–∞–≤—Ü—É
        if receiver.telegram_chat_id:
            product = Product.query.get(product_id) if product_id else None
            product_name = product.name if product else "—Ç–æ–≤–∞—Ä"
            
            telegram_message = f"üí¨ <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
            telegram_message += f"üë§ –û—Ç: <code>{current_user.username}</code>\n"
            telegram_message += f"üì¶ –¢–æ–≤–∞—Ä: <code>{product_name}</code>\n"
            telegram_message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {content}\n\n"
            telegram_message += f"üîó <a href='https://nexus-dark-market.onrender.com/chat/{product_id}'>–û—Ç–≤–µ—Ç–∏—Ç—å</a>"
            
            print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram: {receiver.telegram_chat_id}")
            telegram_sent = send_telegram_message(telegram_message, receiver.telegram_chat_id)
            if telegram_sent:
                print(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        else:
            print(f"‚ö†Ô∏è –£ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Telegram: {receiver.username}")
        
        response_data = {
            'success': True, 
            'message': '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            'message_id': message.id,
            'created_at': message.created_at.strftime('%H:%M')
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç: {response_data}")
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'})

@app.route('/messages')
@login_required
def my_messages():
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sent_messages = db.session.query(Message).filter(Message.sender_id == current_user.id).all()
    received_messages = db.session.query(Message).filter(Message.receiver_id == current_user.id).all()
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    dialogues = {}
    
    for message in sent_messages + received_messages:
        other_user_id = message.receiver_id if message.sender_id == current_user.id else message.sender_id
        other_user = User.query.get(other_user_id)
        
        if other_user_id not in dialogues:
            dialogues[other_user_id] = {
                'user': other_user,
                'last_message': message,
                'unread_count': 0
            }
        else:
            if message.created_at > dialogues[other_user_id]['last_message'].created_at:
                dialogues[other_user_id]['last_message'] = message
        
        # –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.receiver_id == current_user.id and not message.is_read:
            dialogues[other_user_id]['unread_count'] += 1
    
    return render_template('messages.html', dialogues=dialogues)

@app.route('/admin')
@login_required
def admin_panel():
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    if not current_user.is_admin:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
        return redirect(url_for('market'))
    
    users_list = User.query.order_by(User.created_at.desc()).all()
    return render_template('admin.html', users=users_list)

@app.route('/admin/user/<int:user_id>/ban', methods=['POST'])
@login_required
def ban_user(user_id):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    user = User.query.get_or_404(user_id)
    if user.id == current_user.id:
        return jsonify({'success': False, 'message': '–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è'})
    
    user.is_banned = True
    try:
        db.session.commit()
        return jsonify({'success': True, 'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})
    except Exception:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ'})

@app.route('/admin/user/<int:user_id>/unban', methods=['POST'])
@login_required
def unban_user(user_id):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    user = User.query.get_or_404(user_id)
    user.is_banned = False
    try:
        db.session.commit()
        return jsonify({'success': True, 'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'})
    except Exception:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ'})

@app.route('/admin/user/<int:user_id>/make_admin', methods=['POST'])
@login_required
def make_admin(user_id):
    """–°–¥–µ–ª–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    user = User.query.get_or_404(user_id)
    user.is_admin = True
    try:
        db.session.commit()
        return jsonify({'success': True, 'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'})
    except Exception:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'})

@app.route('/admin/user/<int:user_id>/remove_admin', methods=['POST'])
@login_required
def remove_admin(user_id):
    """–£–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
    
    user = User.query.get_or_404(user_id)
    if user.id == current_user.id:
        return jsonify({'success': False, 'message': '–ù–µ–ª—å–∑—è —É–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É —Å–∞–º–æ–≥–æ —Å–µ–±—è'})
    
    user.is_admin = False
    try:
        db.session.commit()
        return jsonify({'success': True, 'message': f'–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–±—Ä–∞–Ω—ã —É {user.username}'})
    except Exception:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'})

@app.route('/add_product', methods=['GET', 'POST'])
@login_required
def add_product():
    if request.method == 'POST':
        name = request.form.get('name', '').strip()
        description = request.form.get('description', '').strip()
        price_str = request.form.get('price', '0')
        stock_str = request.form.get('stock', '0')
        if not name:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
            return render_template('add_product.html')
        try:
            price = float(price_str)
            if price <= 0:
                flash('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
                return render_template('add_product.html')
        except ValueError:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã')
            return render_template('add_product.html')
        try:
            stock = int(stock_str)
            if stock < 0:
                flash('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º')
                return render_template('add_product.html')
        except ValueError:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞')
            return render_template('add_product.html')
        image_filename = None
        if 'image' in request.files:
            file = request.files['image']
            if file and file.filename:
                allowed_extensions = {'png', 'jpg', 'jpeg', 'gif', 'webp'}
                if '.' in file.filename and file.filename.rsplit('.', 1)[1].lower() in allowed_extensions:
                    filename = secure_filename(file.filename)
                    timestamp = str(int(datetime.now().timestamp()))
                    name_part, ext_part = filename.rsplit('.', 1)
                    filename = f"{timestamp}_{name_part}.{ext_part}"
                    try:
                        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
                        image_filename = filename
                    except Exception as e:
                        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
                        return render_template('add_product.html')
                else:
                    flash('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PNG, JPG, JPEG, GIF –∏–ª–∏ WebP')
                    return render_template('add_product.html')
        product = Product(
            name=name,
            description=description,
            price=price,
            image=image_filename,
            seller_id=current_user.id,
            stock=stock
        )
        try:
            db.session.add(product)
            db.session.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
            admin_message = f"üì¶ <b>–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n–¢–æ–≤–∞—Ä: <b>{product.name}</b>\n–ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{current_user.username}</b>\n–¶–µ–Ω–∞: {product.price}‚ÇΩ\n–û—Å—Ç–∞—Ç–æ–∫: {product.stock} —à—Ç"
            send_admin_notification(admin_message)
            
            flash('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
            return redirect(url_for('market'))
        except Exception as e:
            db.session.rollback()
            flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞')
            # –ü–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∏–∂–µ
            user_products = Product.query.filter_by(seller_id=current_user.id).order_by(Product.created_at.desc()).all()
            return render_template('add_product.html', products=user_products)
    # GET ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∏ —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
    user_products = Product.query.filter_by(seller_id=current_user.id).order_by(Product.created_at.desc()).all()
    return render_template('add_product.html', products=user_products)

@app.route('/product/<int:product_id>/delete', methods=['POST'])
@login_required
def delete_product(product_id):
    product = Product.query.get_or_404(product_id)
    if product.seller_id != current_user.id:
        return jsonify({'success': False, 'message': '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ'}), 403
    # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if product.image:
        try:
            img_path = os.path.join(app.config['UPLOAD_FOLDER'], product.image)
            if os.path.exists(img_path):
                os.remove(img_path)
        except Exception:
            pass
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
        admin_message = f"üóëÔ∏è <b>–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω</b>\n\n–¢–æ–≤–∞—Ä: <b>{product.name}</b>\n–ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{current_user.username}</b>\n–¶–µ–Ω–∞: {product.price}‚ÇΩ"
        send_admin_notification(admin_message)
        
        db.session.delete(product)
        db.session.commit()
        return jsonify({'success': True})
    except Exception:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏'}), 500

@app.route('/product/<int:product_id>/update', methods=['POST'])
@login_required
def update_product(product_id):
    product = Product.query.get_or_404(product_id)
    if product.seller_id != current_user.id:
        return jsonify({'success': False, 'message': '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'}), 403
    name = request.form.get('name', product.name).strip()
    description = request.form.get('description', product.description or '').strip()
    price_str = request.form.get('price', str(product.price))
    stock_str = request.form.get('stock', str(product.stock if product.stock is not None else 0))
    try:
        price = float(price_str)
        if price <= 0:
            return jsonify({'success': False, 'message': '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å > 0'})
    except ValueError:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞'})
    try:
        stock_val = int(stock_str)
        if stock_val < 0:
            return jsonify({'success': False, 'message': '–û—Å—Ç–∞—Ç–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º'})
    except ValueError:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'})
    product.name = name or product.name
    product.description = description
    product.price = price
    product.stock = stock_val
    # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
    if 'image' in request.files:
        file = request.files['image']
        if file and file.filename:
            allowed_extensions = {'png', 'jpg', 'jpeg', 'gif', 'webp'}
            if '.' in file.filename and file.filename.rsplit('.', 1)[1].lower() in allowed_extensions:
                filename = secure_filename(file.filename)
                timestamp = str(int(datetime.now().timestamp()))
                name_part, ext_part = filename.rsplit('.', 1)
                filename = f"{timestamp}_{name_part}.{ext_part}"
                try:
                    file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))
                    # —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if product.image:
                        old = os.path.join(app.config['UPLOAD_FOLDER'], product.image)
                        if os.path.exists(old):
                            os.remove(old)
                    product.image = filename
                except Exception:
                    return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
            else:
                return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'})
    try:
        db.session.commit()
        return jsonify({'success': True})
    except Exception:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏'})

@app.route('/cart/update/<int:product_id>', methods=['POST'])
@login_required
def update_cart(product_id):
    data = request.get_json()
    qty = data.get('quantity', 1)
    try:
        qty = int(qty)
    except:
        return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'})
    item = CartItem.query.filter_by(user_id=current_user.id, product_id=product_id).first()
    if not item:
        return jsonify({'success': False, 'message': '–¢–æ–≤–∞—Ä –Ω–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ'})
    if qty < 1:
        db.session.delete(item)
    else:
        item.quantity = qty
    try:
        db.session.commit()
        return jsonify({'success': True})
    except:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏'})

@app.route('/cart/add/<int:product_id>', methods=['POST'])
@login_required
def add_to_cart(product_id):
    product = Product.query.get_or_404(product_id)
    if product.seller_id == current_user.id:
        return jsonify({'success': False, 'message': '–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É'})
    if product.stock is not None and product.stock <= 0:
        return jsonify({'success': False, 'message': '–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'})
    existing = CartItem.query.filter_by(user_id=current_user.id, product_id=product_id).first()
    if existing:
        existing.quantity += 1
    else:
        db.session.add(CartItem(user_id=current_user.id, product_id=product_id))
    try:
        # —É–º–µ–Ω—å—à–∞—Ç—å —Å–∫–ª–∞–¥ —Å—Ä–∞–∑—É –Ω–µ –±—É–¥–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ checkout
        db.session.commit()
        return jsonify({'success': True})
    except:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É'})

@app.route('/cart/remove/<int:product_id>', methods=['POST'])
@login_required
def remove_from_cart(product_id):
    item = CartItem.query.filter_by(user_id=current_user.id, product_id=product_id).first()
    if item:
        try:
            db.session.delete(item)
            db.session.commit()
            return jsonify({'success': True})
        except:
            db.session.rollback()
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã'})
    return jsonify({'success': False, 'message': '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ'})

@app.route('/cart/list', methods=['GET'])
@login_required
def list_cart():
    items = CartItem.query.filter_by(user_id=current_user.id).all()
    result = []
    total = 0.0
    for item in items:
        line_total = float(item.product.price) * int(item.quantity)
        total += line_total
        result.append({
            'productId': item.product.id,
            'name': item.product.name,
            'price': float(item.product.price),
            'quantity': int(item.quantity),
            'lineTotal': line_total
        })
    return jsonify({
        'success': True,
        'items': result,
        'count': len(items),
        'total': total
    })

@app.route('/checkout', methods=['POST'])
@login_required
def checkout():
    cart_items = CartItem.query.filter_by(user_id=current_user.id).all()
    if not cart_items:
        return jsonify({'success': False, 'message': '–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞'})
    # –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞ —Å–∫–ª–∞–¥–µ
    for item in cart_items:
        if item.product.stock is not None and item.quantity > item.product.stock:
            return jsonify({'success': False, 'message': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è {item.product.name}'})
    total = sum(item.product.price * item.quantity for item in cart_items)
    if current_user.balance < total:
        return jsonify({
            'success': False,
            'message': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù—É–∂–Ω–æ {total:.2f}‚ÇΩ, –∞ —É –≤–∞—Å {current_user.balance:.2f}‚ÇΩ'
        })
    # –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    items_details = []
    for item in cart_items:
        line_total = float(item.product.price) * int(item.quantity)
        items_details.append({
            'name': item.product.name,
            'qty': int(item.quantity),
            'price': float(item.product.price),
            'line_total': line_total
        })

    try:
        current_user.balance -= total
        for item in cart_items:
            # —Å–ø–∏—Å—ã–≤–∞–µ–º —Å–∫–ª–∞–¥
            if item.product.stock is not None:
                item.product.stock = max(0, int(item.product.stock) - int(item.quantity))
            db.session.delete(item)
        db.session.commit()
        
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞–º —Ç–æ–≤–∞—Ä–æ–≤
        try:
            for item in cart_items:
                seller = item.product.seller
                if seller and seller.telegram_chat_id:
                    send_seller_notification(
                        product_name=item.product.name,
                        quantity=item.quantity,
                        price=float(item.product.price),
                        buyer_name=current_user.username,
                        seller_telegram=seller.telegram_username,
                        seller_chat_id=seller.telegram_chat_id
                    )
        except Exception:
            pass
        return jsonify({
            'success': True,
            'message': f'–ü–æ–∫—É–ø–∫–∞ –Ω–∞ —Å—É–º–º—É {total:.2f}‚ÇΩ —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'
        })
    except:
        db.session.rollback()
        return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏'})

@app.route('/deposit', methods=['POST'])
@login_required
def deposit():
    data = request.get_json()
    amount = data.get('amount', 0)
    if amount > 0 and amount <= 10000:
        try:
            current_user.balance += amount
            db.session.commit()
            return jsonify({'success': True, 'message': f'–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ'})
        except Exception as e:
            db.session.rollback()
            return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞'})
    return jsonify({'success': False, 'message': '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è'})



@app.route('/telegram/webhook', methods=['POST'])
def telegram_webhook():
    """Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram –±–æ—Ç–∞"""
    try:
        data = request.get_json()
        print(f"üîç Webhook received: {data}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        if not data:
            print("‚ùå No data in webhook")
            return jsonify({'ok': True})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏)
        if 'callback_query' in data:
            from telegram_bot import handle_callback_query, answer_callback_query
            callback_query = data['callback_query']
            chat_id = str(callback_query['message']['chat']['id'])
            message_id = callback_query['message']['message_id']
            
            print(f"üîò Callback: {callback_query['data']} from {chat_id}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—Å–∫–∏–µ callback
            if chat_id == '1172834372':
                response, keyboard = handle_callback_query(callback_query, chat_id)
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
                answer_callback_query(callback_query['id'])
                
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                edit_telegram_message(response, chat_id, message_id, keyboard)
            
            return jsonify({'ok': True})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if 'message' not in data:
            print("‚ùå No message in webhook data")
            return jsonify({'ok': True})
        
        message = data['message']
        chat_id = str(message['chat']['id'])
        username = message['from'].get('username', '')
        text = message.get('text', '')
        
        print(f"üì± Chat ID: {chat_id}, Username: {username}, Text: {text}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        if chat_id == '1172834372':
            from telegram_bot import handle_admin_command
            response, keyboard = handle_admin_command(text, chat_id)
            send_telegram_message(response, chat_id, keyboard)
            return jsonify({'ok': True})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if text.startswith('/start'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start (–µ—Å–ª–∏ –µ—Å—Ç—å)
            start_param = text.split(' ', 1)[1] if ' ' in text else None
            
            if start_param == 'get_id':
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ Chat ID
                id_message = f"üÜî <b>–í–∞—à Chat ID:</b>\n\n<code>{chat_id}</code>\n\nüìã <b>–ö–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:</b>\n‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –≤—ã—à–µ\n‚Ä¢ –ò–ª–∏ –≤—ã–¥–µ–ª–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é\n\nüîß <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>\n1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID\n2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∞ —Å–∞–π—Ç–µ\n3. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å'"
                send_telegram_message(id_message, chat_id)
                return jsonify({'ok': True})
            
            else:
                # –û–±—ã—á–Ω—ã–π /start - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                welcome_message = f"""üÜî <b>–í–∞—à Chat ID:</b>

<code>{chat_id}</code>

üìã <b>–ö–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –≤—ã—à–µ
‚Ä¢ –ò–ª–∏ –≤—ã–¥–µ–ª–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é

üîß <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID
2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∞ —Å–∞–π—Ç–µ Nexus Dark
3. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å'

‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b> –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.

üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–ª—É—á–∏—Ç—å Chat ID"""
                
                send_telegram_message(welcome_message, chat_id)
                return jsonify({'ok': True})
        
        elif text and not text.startswith('/'):
            # –ù–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            unknown_message = f"""üÜî <b>–í–∞—à Chat ID:</b>

<code>{chat_id}</code>

üìã <b>–ö–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ID –≤—ã—à–µ
‚Ä¢ –ò–ª–∏ –≤—ã–¥–µ–ª–∏—Ç–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é

üîß <b>–ß—Ç–æ –¥–∞–ª—å—à–µ:</b>
1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID
2. –í—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –Ω–∞ —Å–∞–π—Ç–µ Nexus Dark
3. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å'

‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b> –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤.

üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–ª—É—á–∏—Ç—å Chat ID"""
            
            send_telegram_message(unknown_message, chat_id)
            return jsonify({'ok': True})
        
        if username:
            # –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±: –ø–æ–∏—Å–∫ –ø–æ username (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            user = User.query.filter_by(telegram_username=username).first()
            if user:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if user.telegram_chat_id:
                    already_setup_text = f"–ü—Ä–∏–≤–µ—Ç, {user.username}! üëã\n\n‚úÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!</b>\n\nüì± Username: @{username}\nüÜî Chat ID: {user.telegram_chat_id}\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Nexus Dark!"
                    send_telegram_message(already_setup_text, chat_id)
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    user.telegram_chat_id = chat_id
                    db.session.commit()
                    print(f"User {username} started bot, chat_id: {chat_id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {user.username}! üéâ\n\n‚úÖ <b>Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Nexus Dark!\n\nüì± –í–∞—à username: @{username}\nüÜî Chat ID: {chat_id}\n\nüéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É\n‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–∞—Ö\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–¢–µ—Å—Ç Telegram' –≤ –ø—Ä–æ—Ñ–∏–ª–µ"
                    send_telegram_message(welcome_text, chat_id)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ
                not_found_text = f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–í–∞—à Telegram username: <b>@{username}</b>\n\nüîß <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç <b>Nexus Dark</b>\n2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n4. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram username: <b>{username}</b>\n5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/start</b>"
                send_telegram_message(not_found_text, chat_id)
        else:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç username
            no_setup_text = "‚ùå <b>–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω Telegram username</b>\n\nüîß <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n1. –ó–∞–π–¥–∏—Ç–µ –≤ <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>username</b>\n3. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç <b>Nexus Dark</b>\n4. –£–∫–∞–∂–∏—Ç–µ username –≤ <b>–ø—Ä–æ—Ñ–∏–ª–µ</b>\n5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/start</b>"
            send_telegram_message(no_setup_text, chat_id)
        
        if text == '/check':
            if username:
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_username
                user = User.query.filter_by(telegram_username=username).first()
                if user:
                    if user.telegram_chat_id:
                        status_text = f"‚úÖ <b>–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user.username}</b>\nüì± Telegram: <b>@{username}</b>\nüÜî Chat ID: <b>{user.telegram_chat_id}</b>\nüìä –°—Ç–∞—Ç—É—Å: <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ</b>\n\nüéØ –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤!"
                    else:
                        status_text = f"‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user.username}</b>\nüì± Telegram: <b>@{username}</b>\nüìä –°—Ç–∞—Ç—É—Å: <b>–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ</b>\n\nüîß <b>–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/start</b>"
                    send_telegram_message(status_text, chat_id)
                else:
                    not_found_text = f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–í–∞—à Telegram username: <b>@{username}</b>\n\nüîß <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç <b>Nexus Dark</b>\n2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n4. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram username: <b>{username}</b>\n5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/start</b>"
                    send_telegram_message(not_found_text, chat_id)
            else:
                no_username_text = "‚ùå <b>–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω Telegram username</b>\n\nüîß <b>–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n1. –ó–∞–π–¥–∏—Ç–µ –≤ <b>–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram</b>\n2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>username</b>\n3. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç <b>Nexus Dark</b>\n4. –£–∫–∞–∂–∏—Ç–µ username –≤ <b>–ø—Ä–æ—Ñ–∏–ª–µ</b>\n5. –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>/start</b>"
                send_telegram_message(no_username_text, chat_id)
        
        return jsonify({'ok': True})
    except Exception as e:
        print(f"Webhook error: {e}")
        return jsonify({'ok': True})

@app.route('/telegram/manual-setup', methods=['POST'])
@login_required
def manual_telegram_setup():
    """–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        data = request.get_json()
        chat_id = data.get('chat_id')
        
        if not chat_id:
            return jsonify({'success': False, 'message': '–ù–µ —É–∫–∞–∑–∞–Ω chat_id'})
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_user.telegram_chat_id = chat_id
        db.session.commit()
        
        print(f"‚úÖ Manual setup: User {current_user.username} chat_id set to {chat_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = f"üéâ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!</b>\n\n–ü—Ä–∏–≤–µ—Ç, {current_user.username}!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Nexus Dark!"
        send_telegram_message(test_message, chat_id)
        
        return jsonify({
            'success': True, 
            'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!',
            'chat_id': chat_id
        })
        
    except Exception as e:
        print(f"‚ùå Manual setup error: {e}")
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {str(e)}'})


@app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    db.session.rollback()
    return render_template('500.html'), 500

@app.route('/admin/user/<int:user_id>/setup_telegram', methods=['POST'])
@login_required
def setup_telegram(user_id):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'})
    
    user = User.query.get(user_id)
    if not user:
        return jsonify({'success': False, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    data = request.get_json()
    chat_id = data.get('chat_id')
    
    if not chat_id:
        return jsonify({'success': False, 'message': 'Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω'})
    
    try:
        user.telegram_chat_id = chat_id
        db.session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_message = f"–ü—Ä–∏–≤–µ—Ç, {user.username}! üéâ\n\nTelegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤!"
        send_telegram_message(test_message, chat_id)
        
        return jsonify({'success': True, 'message': f'Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}'})

@app.route('/telegram/test', methods=['POST'])
@login_required
def test_telegram():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    if not current_user.telegram_chat_id:
        return jsonify({'success': False, 'message': 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'})
    
    test_message = f"üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{current_user.username}</b>\nüÜî Chat ID: <b>{current_user.telegram_chat_id}</b>\n\n‚úÖ <b>Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!</b>\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Nexus Dark."
    
    try:
        send_telegram_message(test_message, current_user.telegram_chat_id)
        return jsonify({'success': True, 'message': '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'})

@app.route('/admin/database')
@login_required
def view_database():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not current_user.is_admin:
        return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = User.query.all()
        return render_template('database.html', users=users)
        
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {str(e)}", 500

@app.route('/admin/user/<int:user_id>/delete', methods=['POST'])
@login_required
def delete_user(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user.is_admin:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'})
    
    user = User.query.get(user_id)
    if not user:
        return jsonify({'success': False, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    
    if user.id == current_user.id:
        return jsonify({'success': False, 'message': '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è'})
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        products = Product.query.filter_by(seller_id=user.id).all()
        for product in products:
            # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            if product.image:
                try:
                    img_path = os.path.join(app.config['UPLOAD_FOLDER'], product.image)
                    if os.path.exists(img_path):
                        os.remove(img_path)
                except Exception:
                    pass
            db.session.delete(product)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cart_items = CartItem.query.filter_by(user_id=user.id).all()
        for item in cart_items:
            db.session.delete(item)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
        admin_message = f"üóëÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user.username}</b>\nEmail: {user.email}\nTelegram: @{user.telegram_username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–¢–æ–≤–∞—Ä–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {len(products)}"
        send_admin_notification(admin_message)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.session.delete(user)
        db.session.commit()
        
        return jsonify({'success': True, 'message': f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É–¥–∞–ª–µ–Ω'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}'})

# === 7. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        ensure_schema()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
        admin_exists = User.query.filter_by(is_admin=True).first()
        if not admin_exists:
            admin = User(
                username='Rodeos',
                email='rodeos@nexus.dark',
                password_hash=generate_password_hash('Rodeos24102007'),
                balance=10000.0,
                is_admin=True,
                is_banned=False,
                telegram_chat_id='1172834372'  # ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–æ–≤
            )
            db.session.add(admin)
            db.session.commit()
            print('–°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: Rodeos/Rodeos24102007')
        else:
            print(f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {admin_exists.username}')
    
    import os
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
