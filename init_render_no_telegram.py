#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Nexus Dark –Ω–∞ Render –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram
"""

import os
import sys
import requests
import json
from datetime import datetime

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ Telegram)
    required_vars = {
        'SECRET_KEY': os.environ.get('SECRET_KEY'),
        'DATABASE_URL': os.environ.get('DATABASE_URL'),
    }
    
    optional_vars = {
        'TELEGRAM_BOT_TOKEN': os.environ.get('TELEGRAM_BOT_TOKEN'),
        'TELEGRAM_CHAT_ID': os.environ.get('TELEGRAM_CHAT_ID')
    }
    
    for var_name, var_value in required_vars.items():
        if var_value:
            if 'KEY' in var_name:
                print(f"‚úÖ {var_name}: {'*' * 10}")
            else:
                print(f"‚úÖ {var_name}: {var_value[:50]}...")
        else:
            print(f"‚ùå {var_name}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù")
    
    print("\nüì± Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
    for var_name, var_value in optional_vars.items():
        if var_value:
            if 'TOKEN' in var_name:
                print(f"‚úÖ {var_name}: {'*' * 10}")
            else:
                print(f"‚úÖ {var_name}: {var_value}")
        else:
            print(f"‚ö†Ô∏è {var_name}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    print("=" * 50)
    return all(required_vars.values())

def test_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)
    
    try:
        from app import app, db, User, Product, Message
        from werkzeug.security import generate_password_hash
        
        with app.app_context():
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∞
            admin_exists = User.query.filter_by(is_admin=True).first()
            if not admin_exists:
                admin = User(
                    username='Rodeos',
                    email='rodeos@nexus.dark',
                    password_hash=generate_password_hash('Rodeos24102007'),
                    balance=10000.0,
                    is_admin=True,
                    is_banned=False,
                    telegram_chat_id='1172834372'
                )
                db.session.add(admin)
                db.session.commit()
                print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: Rodeos")
            else:
                print(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {admin_exists.username}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_users = User.query.count()
            total_products = Product.query.count()
            print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            print(f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_telegram_optional():
    """–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram API"""
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)...")
    print("=" * 50)
    
    token = os.environ.get('TELEGRAM_BOT_TOKEN')
    chat_id = os.environ.get('TELEGRAM_CHAT_ID', '1172834372')
    
    if not token:
        print("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - Telegram —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        url = f"https://api.telegram.org/bot{token}/getMe"
        response = requests.get(url, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data.get('result', {})
                print(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω!")
                print(f"ü§ñ –ò–º—è –±–æ—Ç–∞: {bot_info.get('first_name', 'N/A')}")
                print(f"üÜî Username: @{bot_info.get('username', 'N/A')}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                test_url = f"https://api.telegram.org/bot{token}/sendMessage"
                test_payload = {
                    'chat_id': chat_id,
                    'text': 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Nexus Dark',
                    'parse_mode': 'HTML'
                }
                
                test_response = requests.post(test_url, data=test_payload, timeout=10)
                if test_response.status_code == 200:
                    test_data = test_response.json()
                    if test_data.get('ok'):
                        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        return True
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {test_data}")
                        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                else:
                    print(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {test_response.status_code}")
                    return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {data}")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        else:
            print(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {e}")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Nexus Dark –Ω–∞ Render (–±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram)")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_environment():
        print("‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render:")
        print("   - SECRET_KEY")
        print("   - DATABASE_URL")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not test_database():
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º Telegram
    test_telegram_optional()
    
    print("=" * 50)
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ")
    print("üì± Telegram —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
