#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫
"""

import requests
import json
import time
import subprocess
import re

def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='utf-8')
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def send_to_bot(webhook_url, message_data):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    try:
        response = requests.post(webhook_url, json=message_data, timeout=10)
        return response.status_code == 200, response.json() if response.status_code == 200 else None
    except Exception as e:
        return False, None

def read_bot_response(webhook_url):
    """–ß–∏—Ç–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞"""
    print("üì± –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞...")
    
    # –®–∞–≥ 1: /start
    print("1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /start")
    start_message = {
        "update_id": int(time.time()),
        "message": {
            "message_id": int(time.time()),
            "from": {"id": 1172834372, "is_bot": False, "first_name": "Test"},
            "chat": {"id": 1172834372, "type": "private"},
            "date": int(time.time()),
            "text": "/start"
        }
    }
    success, response = send_to_bot(webhook_url, start_message)
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if success else '‚ùå'}")
    time.sleep(2)
    
    # –®–∞–≥ 2: –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞
    print("2Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞")
    callback_message = {
        "update_id": int(time.time()),
        "callback_query": {
            "id": f"test_{int(time.time())}",
            "from": {"id": 1172834372, "is_bot": False, "first_name": "Test"},
            "message": {
                "message_id": 1,
                "from": {"id": 1172834372, "is_bot": False, "first_name": "Test"},
                "chat": {"id": 1172834372, "type": "private"},
                "date": int(time.time()),
                "text": "/start"
            },
            "data": "change_admin_username"
        }
    }
    success, response = send_to_bot(webhook_url, callback_message)
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if success else '‚ùå'}")
    time.sleep(2)
    
    # –®–∞–≥ 3: –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
    print("3Ô∏è‚É£ –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω 'testuser123'")
    input_message = {
        "update_id": int(time.time()),
        "message": {
            "message_id": int(time.time()),
            "from": {"id": 1172834372, "is_bot": False, "first_name": "Test"},
            "chat": {"id": 1172834372, "type": "private"},
            "date": int(time.time()),
            "text": "testuser123"
        }
    }
    success, response = send_to_bot(webhook_url, input_message)
    print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ' if success else '‚ùå'}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if success and response:
        print(f"   üì± –û—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞: {response}")
        
        if response.get('ok'):
            if 'result' in response and 'text' in response['result']:
                bot_text = response['result']['text']
                print(f"   üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {bot_text}")
                return bot_text
            else:
                print("   ‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
                return None
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response}")
            return None
    else:
        print("   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return None

def analyze_bot_message(message):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞"""
    if not message:
        return False, "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞"
    
    print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–û–û–ë–©–ï–ù–ò–Ø:")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    
    # –°–ª–æ–≤–∞—Ä—å –æ—à–∏–±–æ–∫ –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏–π
    error_analysis = {
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞": {
            "type": "command_error",
            "description": "–ë–æ—Ç –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É",
            "fix": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ process_telegram_update"
        },
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ": {
            "type": "action_error", 
            "description": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ callback",
            "fix": "–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É callback –≤ handle_callback_query"
        },
        "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω": {
            "type": "access_error",
            "description": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞",
            "fix": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ADMIN_CHAT_ID"
        },
        "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω": {
            "type": "admin_error",
            "description": "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            "fix": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é change_admin_username"
        },
        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω": {
            "type": "user_error",
            "description": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            "fix": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    for error_text, error_info in error_analysis.items():
        if error_text in message:
            print(f"   ‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê:")
            print(f"      –¢–∏–ø: {error_info['type']}")
            print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {error_info['description']}")
            print(f"      –†–µ—à–µ–Ω–∏–µ: {error_info['fix']}")
            return True, error_info['type'], error_info['fix']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å–ø–µ—Ö
    success_patterns = [
        "‚úÖ –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω",
        "‚úÖ –ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω", 
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º",
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω",
        "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω",
        "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ",
        "üë§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –∞–¥–º–∏–Ω–∞",
        "üîí –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∞–¥–º–∏–Ω–∞"
    ]
    
    for pattern in success_patterns:
        if pattern in message:
            print(f"   ‚úÖ –£–°–ü–ï–•: {pattern}")
            return False, "success", "–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ—à–∏–±–∫—É, –Ω–∏ —É—Å–ø–µ—Ö
    print(f"   ‚ö†Ô∏è –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    return False, "unknown", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"

def fix_bot_code(error_type, fix_description):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏"""
    print(f"\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–î–ê:")
    print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {error_type}")
    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {fix_description}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    try:
        with open('telegram_bot.py', 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
    if error_type == "command_error":
        print("   üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if "if state:" not in content:
            print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É
        debug_addition = '''
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    print(f"üîç DEBUG: chat_id={chat_id}, state={state}, text='{text}'")
    print(f"üîç DEBUG: user_states={user_states}")'''
        
        if "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π" not in content:
            content = content.replace("if state:", f"if state:{debug_addition}")
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
        
        # –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        if "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" in content:
            old_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"
            new_text = "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"
            content = content.replace(old_text, new_text)
            print("   ‚úÖ –£–ª—É—á—à–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    
    elif error_type == "admin_error":
        print("   üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –∞–¥–º–∏–Ω–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é change_admin_username
        if "User.query.filter_by(is_admin=True).first()" not in content:
            print("   ‚ùå –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–∫—É –≤ —Ñ—É–Ω–∫—Ü–∏—é
        debug_code = '''
        print(f"üîç DEBUG: –ò—â–µ–º –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω: {admin}")'''
        
        if "DEBUG: –ò—â–µ–º –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" not in content:
            content = content.replace(
                "admin = User.query.filter_by(is_admin=True).first()",
                f"admin = User.query.filter_by(is_admin=True).first(){debug_code}"
            )
            print("   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∞")
    
    elif error_type == "user_error":
        print("   üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if "User.query.filter_by(username=" not in content:
            print("   ‚ùå –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print("   ‚úÖ –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        with open('telegram_bot.py', 'w', encoding='utf-8') as f:
            f.write(content)
        print("   ‚úÖ –§–∞–π–ª telegram_bot.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def update_repository():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    print("\nüöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    success, stdout, stderr = run_command("git add .")
    if not success:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ git add: {stderr}")
        return False
    
    # –ö–æ–º–º–∏—Ç–∏–º
    success, stdout, stderr = run_command('git commit -m "Advanced auto-fix: resolve bot error messages with detailed analysis"')
    if not success:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ git commit: {stderr}")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    success, stdout, stderr = run_command("git push origin main")
    if not success:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ git push: {stderr}")
        return False
    
    print("   ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ü–†–û–î–í–ò–ù–£–¢–´–ô –°–ö–†–ò–ü–¢ –ß–¢–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ë–û–¢–ê")
    print("=" * 70)
    print("üì± –ß–∏—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥")
    print()
    
    webhook_url = "https://nexus-dark-market.onrender.com/telegram/webhook"
    max_attempts = 3
    attempt = 1
    
    while attempt <= max_attempts:
        print(f"üîÑ –ü–û–ü–´–¢–ö–ê {attempt} –∏–∑ {max_attempts}")
        print("-" * 50)
        
        # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
        bot_message = read_bot_response(webhook_url)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        has_error, error_type, fix_description = analyze_bot_message(bot_message)
        
        if not has_error:
            print(f"\nüéâ –£–°–ü–ï–•! –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt}")
            print("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            break
        else:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ù–ê –ü–û–ü–´–¢–ö–ï {attempt}")
            print(f"   –¢–∏–ø: {error_type}")
            print(f"   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {fix_description}")
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
            if fix_bot_code(error_type, fix_description):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                if update_repository():
                    print("‚è≥ –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
                    time.sleep(30)
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
                    break
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥")
                break
        
        attempt += 1
    
    print("\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
    print("=" * 70)
    
    if attempt <= max_attempts:
        print("‚úÖ –°–ö–†–ò–ü–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"   –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ {attempt} –ø–æ–ø—ã—Ç–æ–∫")
        print("   –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –°–ö–†–ò–ü–¢ –ù–ï –°–ú–û–ì –ò–°–ü–†–ê–í–ò–¢–¨ –û–®–ò–ë–ö–£!")
        print("   –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ")
    
    print("\nüåê –°—Å—ã–ª–∫–∏:")
    print("   ‚Ä¢ –ë–æ—Ç: @NexusDarkBot")
    print("   ‚Ä¢ –°–∞–π—Ç: https://nexus-dark-market.onrender.com")
    print("   ‚Ä¢ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/Rodeos2410/nexus-dark-market.git")

if __name__ == "__main__":
    main()
