#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞
"""

import subprocess
import requests
import json
import time

def run_command(command):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding='utf-8')
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def update_repository():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    print("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    success, stdout, stderr = run_command("git add .")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ git add: {stderr}")
        return False
    
    # –ö–æ–º–º–∏—Ç–∏–º
    success, stdout, stderr = run_command('git commit -m "Fix chat_id type consistency and add debug logging"')
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ git commit: {stderr}")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    success, stdout, stderr = run_command("git push origin main")
    if not success:
        print(f"‚ùå –û—à–∏–±–∫–∞ git push: {stderr}")
        return False
    
    print("‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω")
    return True

def test_login_change():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞...")
    
    webhook_url = "https://nexus-dark-market.onrender.com/telegram/webhook"
    
    # –®–∞–≥ 1: /start
    print("1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /start...")
    message = {
        "update_id": int(time.time()),
        "message": {
            "message_id": int(time.time()),
            "from": {"id": 1172834372, "is_bot": False, "first_name": "Test"},
            "chat": {"id": 1172834372, "type": "private"},
            "date": int(time.time()),
            "text": "/start"
        }
    }
    
    try:
        response = requests.post(webhook_url, json=message, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    time.sleep(2)
    
    # –®–∞–≥ 2: –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞
    print("2Ô∏è‚É£ –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞...")
    callback = {
        "update_id": int(time.time()),
        "callback_query": {
            "id": f"test_{int(time.time())}",
            "from": {"id": 1172834372, "is_bot": False, "first_name": "Test"},
            "message": {
                "message_id": 1,
                "from": {"id": 1172834372, "is_bot": False, "first_name": "Test"},
                "chat": {"id": 1172834372, "type": "private"},
                "date": int(time.time()),
                "text": "/start"
            },
            "data": "change_admin_username"
        }
    }
    
    try:
        response = requests.post(webhook_url, json=callback, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    time.sleep(2)
    
    # –®–∞–≥ 3: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞
    print("3Ô∏è‚É£ –í–≤–æ–¥–∏–º –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω...")
    message = {
        "update_id": int(time.time()),
        "message": {
            "message_id": int(time.time()),
            "from": {"id": 1172834372, "is_bot": False, "first_name": "Test"},
            "chat": {"id": 1172834372, "type": "private"},
            "date": int(time.time()),
            "text": "testadmin123"
        }
    }
    
    try:
        response = requests.post(webhook_url, json=message, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   –û—Ç–≤–µ—Ç: {result}")
            if result.get('ok'):
                print("   ‚úÖ –õ–æ–≥–∏–Ω –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ: {result}")
                return False
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 60)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if not update_repository():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        return
    
    print("\n‚è≥ –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
    time.sleep(30)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞
    success = test_login_change()
    
    print("\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("=" * 60)
    
    if success:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù!")
        print("   –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù!")
        print("   –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –ª–æ–≥–∏–Ω–∞")
    
    return success

if __name__ == "__main__":
    main()
