#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Ç–æ–º
"""

import os
import sys
import requests
import json
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_database_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app import app, db, User, Product, Message
        
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            user_count = User.query.count()
            product_count = Product.query.count()
            message_count = Message.query.count()
            
            print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
            print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {product_count}")
            print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã message
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
                inspector = db.inspect(db.engine)
                columns = inspector.get_columns('message')
                print(f"   üìä –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã message: {[col['name'] for col in columns]}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                recent_messages = Message.query.order_by(Message.created_at.desc()).limit(5).all()
                print(f"   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(recent_messages)}")
                
                for msg in recent_messages:
                    print(f"      - ID: {msg.id}, –û—Ç: {msg.sender_id}, –ö: {msg.receiver_id}, –¢–æ–≤–∞—Ä: {msg.product_id}")
                
                return True
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã message: {e}")
                return False
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def test_message_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    try:
        from app import app, db, User, Product, Message
        
        with app.app_context():
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä
            user = User.query.first()
            product = Product.query.first()
            
            if not user:
                print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
                
            if not product:
                print("   ‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            print(f"   üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.id})")
            print(f"   üì¶ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {product.name} (ID: {product.id})")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = Message(
                sender_id=user.id,
                receiver_id=product.seller_id,
                product_id=product.id,
                content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
                is_read=False
            )
            
            db.session.add(test_message)
            db.session.commit()
            
            print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {test_message.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            saved_message = Message.query.get(test_message.id)
            if saved_message:
                print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {saved_message.content}")
                print(f"   üìä –î–∞–Ω–Ω—ã–µ: –û—Ç {saved_message.sender_id} –∫ {saved_message.receiver_id}, —Ç–æ–≤–∞—Ä {saved_message.product_id}")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                db.session.delete(saved_message)
                db.session.commit()
                print("   ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
                
                return True
            else:
                print("   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                return False
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        db.session.rollback()
        return False

def test_chat_queries():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —á–∞—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —á–∞—Ç–∞...")
    
    try:
        from app import app, db, User, Product, Message
        
        with app.app_context():
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–æ–≤–∞—Ä
            user = User.query.first()
            product = Product.query.first()
            
            if not user or not product:
                print("   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            messages = Message.query.filter(
                ((Message.sender_id == user.id) & (Message.receiver_id == product.seller_id)) |
                ((Message.sender_id == product.seller_id) & (Message.receiver_id == user.id))
            ).filter(Message.product_id == product.id).order_by(Message.created_at.asc()).all()
            
            print(f"   üìù –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {len(messages)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sent_messages = Message.query.filter(Message.sender_id == user.id).all()
            received_messages = Message.query.filter(Message.receiver_id == user.id).all()
            
            print(f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(sent_messages)}")
            print(f"   üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(received_messages)}")
            
            # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
            dialogues = {}
            for message in sent_messages + received_messages:
                other_user_id = message.receiver_id if message.sender_id == user.id else message.sender_id
                if other_user_id not in dialogues:
                    dialogues[other_user_id] = {
                        'user': User.query.get(other_user_id),
                        'last_message': message,
                        'unread_count': 0
                    }
                else:
                    if message.created_at > dialogues[other_user_id]['last_message'].created_at:
                        dialogues[other_user_id]['last_message'] = message
                
                if message.receiver_id == user.id and not message.is_read:
                    dialogues[other_user_id]['unread_count'] += 1
            
            print(f"   üí¨ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogues)}")
            
            return True
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–∞—Ç–∞: {e}")
        return False

def test_web_interface():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å...")
    
    base_url = "http://localhost:5000"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        response = requests.get(f"{base_url}/", timeout=5)
        print(f"   üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        response = requests.get(f"{base_url}/messages", timeout=5)
        print(f"   üí¨ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {response.status_code}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        response = requests.get(f"{base_url}/send_message", timeout=5)
        print(f"   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (GET): {response.status_code}")
        
        return True
        
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: {e}")
        return False

def check_message_relationships():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...")
    
    try:
        from app import app, db, User, Product, Message
        
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
            messages_without_sender = Message.query.filter(~Message.sender_id.in_([u.id for u in User.query.all()])).all()
            messages_without_receiver = Message.query.filter(~Message.receiver_id.in_([u.id for u in User.query.all()])).all()
            messages_without_product = Message.query.filter(
                Message.product_id.isnot(None),
                ~Message.product_id.in_([p.id for p in Product.query.all()])
            ).all()
            
            print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º: {len(messages_without_sender)}")
            print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º: {len(messages_without_receiver)}")
            print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–æ–≤–∞—Ä–æ–º: {len(messages_without_product)}")
            
            if messages_without_sender or messages_without_receiver or messages_without_product:
                print("   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏!")
                return False
            else:
                print("   ‚úÖ –í—Å–µ —Å–≤—è–∑–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
                return True
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Ç–æ–º")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_ok = test_database_connection()
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_ok = test_message_creation()
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å—ã —á–∞—Ç–∞
    queries_ok = test_chat_queries()
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 4: –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    web_ok = test_web_interface()
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 5: –°–≤—è–∑–∏ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    relationships_ok = check_message_relationships()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if db_ok else '‚ùå'}")
    print(f"   –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if message_ok else '‚ùå'}")
    print(f"   –ó–∞–ø—Ä–æ—Å—ã —á–∞—Ç–∞: {'‚úÖ' if queries_ok else '‚ùå'}")
    print(f"   –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {'‚úÖ' if web_ok else '‚ùå'}")
    print(f"   –°–≤—è–∑–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if relationships_ok else '‚ùå'}")
    
    if all([db_ok, message_ok, queries_ok, relationships_ok]):
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        if web_ok:
            print("   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("   ‚ö†Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return True
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ —á–∞—Ç–∞")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
