#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub
"""

import os
import subprocess
import sys

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            if result.stdout:
                print(f"   {result.stdout.strip()}")
        else:
            print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
            if result.stderr:
                print(f"   {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False
    return True

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ Git
    if not os.path.exists('.git'):
        print("‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if not run_command("git status", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git"):
        return False
    
    return True

def add_files():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ Git"""
    print("\nüìÅ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ Git")
    print("=" * 50)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    if not run_command("git add .", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if not run_command("git status", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"):
        return False
    
    return True

def create_commit():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç"""
    print("\nüíæ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞")
    print("=" * 50)
    
    commit_message = """Complete admin panel with buttons and Render deployment setup

- Added full admin panel with inline buttons in Telegram bot
- Fixed webhook to handle callback queries
- Updated requirements.txt with all dependencies
- Fixed Procfile for Render deployment
- Added render.yaml with environment variables
- Created initialization scripts for Render
- Added comprehensive testing scripts
- Updated app.py with callback handling
- All components ready for production deployment"""
    
    if not run_command(f'git commit -m "{commit_message}"', "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"):
        return False
    
    return True

def push_to_github():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ GitHub"""
    print("\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    result = subprocess.run("git remote -v", shell=True, capture_output=True, text=True)
    if result.returncode != 0 or not result.stdout.strip():
        print("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   git remote add origin https://github.com/–í–ê–®_USERNAME/–í–ê–®_REPOSITORY.git")
        return False
    
    print(f"üì° –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:")
    print(f"   {result.stdout.strip()}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if not run_command("git push origin main", "–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ GitHub"):
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   git push -u origin main")
        return False
    
    return True

def check_key_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("=" * 50)
    
    key_files = [
        "app.py",
        "telegram_bot.py", 
        "config.py",
        "requirements.txt",
        "Procfile",
        "render.yaml",
        "runtime.txt",
        "init_render.py",
        "setup_webhook.py",
        "test_all_components.py"
    ]
    
    missing_files = []
    for file in key_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    if not check_key_files():
        print("\n‚ùå –ù–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Git
    if not check_git_status():
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
        return False
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    if not add_files():
        print("\n‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç
    if not create_commit():
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–∞")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GitHub
    if not push_to_github():
        print("\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ GitHub")
        return False
    
    print("\nüéâ –†–ï–ü–û–ó–ò–¢–û–†–ò–ô –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù!")
    print("=" * 60)
    
    print("\nüìã –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:")
    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Git")
    print("‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
    print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
    
    print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–π–¥–∏—Ç–µ –Ω–∞ GitHub –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã")
    print("2. –û–±–Ω–æ–≤–∏—Ç–µ –¥–µ–ø–ª–æ–π –Ω–∞ Render")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python setup_webhook.py")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python test_all_components.py")
    
    print("\nüîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub!")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
