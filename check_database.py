#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ç–æ–∫–µ–Ω–æ–≤
"""

import sqlite3
import os
from datetime import datetime

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "instance/nexus_dark.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user:")
        cursor.execute("PRAGMA table_info(user)")
        columns = cursor.fetchall()
        
        for col in columns:
            print(f"  - {col[1]} ({col[2]}) - {'NOT NULL' if col[3] else 'NULL'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        column_names = [col[1] for col in columns]
        required_columns = ['telegram_username', 'telegram_chat_id', 'telegram_setup_token']
        
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫:")
        for col in required_columns:
            if col in column_names:
                print(f"  ‚úÖ {col}")
            else:
                print(f"  ‚ùå {col} - –û–¢–°–£–¢–°–¢–í–£–ï–¢!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüë• –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        cursor.execute("SELECT id, username, email, telegram_username, telegram_chat_id, telegram_setup_token FROM user")
        users = cursor.fetchall()
        
        if not users:
            print("  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            for user in users:
                print(f"\n  üë§ ID: {user[0]}, Username: {user[1]}")
                print(f"     Email: {user[2]}")
                print(f"     Telegram username: {user[3] or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"     Telegram chat_id: {user[4] or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
                print(f"     Setup token: {user[5] or '–ù–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
        print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:")
        cursor.execute("SELECT telegram_setup_token, COUNT(*) FROM user WHERE telegram_setup_token IS NOT NULL GROUP BY telegram_setup_token HAVING COUNT(*) > 1")
        duplicates = cursor.fetchall()
        
        if duplicates:
            print("  ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã:")
            for token, count in duplicates:
                print(f"     {token}: {count} —Ä–∞–∑")
        else:
            print("  ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def test_token_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤")
    print("=" * 50)
    
    import secrets
    import string
    
    def generate_telegram_setup_token():
        alphabet = string.ascii_letters + string.digits
        return ''.join(secrets.choice(alphabet) for _ in range(32))
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    tokens = []
    for i in range(5):
        token = generate_telegram_setup_token()
        tokens.append(token)
        print(f"  {i+1}. {token}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    if len(set(tokens)) == len(tokens):
        print("  ‚úÖ –í—Å–µ —Ç–æ–∫–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã")
    else:
        print("  ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    for i, token in enumerate(tokens):
        if len(token) == 32:
            print(f"  ‚úÖ –¢–æ–∫–µ–Ω {i+1}: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞")
        else:
            print(f"  ‚ùå –¢–æ–∫–µ–Ω {i+1}: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ ({len(token)})")

def check_webhook_url():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
    
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞
    bot_token = "8458514538:AAFIAT7BrKelIHie9-JscBnOlAFd_V2qyMY"
    webhook_url = "https://your-domain.com/telegram/webhook"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
    
    print(f"Bot Token: {bot_token[:10]}...")
    print(f"Webhook URL: {webhook_url}")
    print("\nüí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print(f"curl -X POST \"https://api.telegram.org/bot{bot_token}/setWebhook\" -d \"url={webhook_url}\"")

if __name__ == "__main__":
    check_database()
    test_token_generation()
    check_webhook_url()
    
    print("\n" + "=" * 50)
    print("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
    print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")


