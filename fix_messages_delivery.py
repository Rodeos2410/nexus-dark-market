#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def check_message_delivery():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç")
    print("=" * 50)
    
    try:
        from app import app, db, User, Product, Message
        
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç–æ–≤–∞—Ä—ã
            users = User.query.all()
            products = Product.query.all()
            
            if len(users) < 2 or len(products) == 0:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
                print(f"   –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
                return False
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
            user = users[0]
            product = products[0]
            
            print(f"üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.id})")
            print(f"üì¶ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {product.name} (ID: {product.id})")
            print(f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü —Ç–æ–≤–∞—Ä–∞: {product.seller.username} (ID: {product.seller_id})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            existing_messages = Message.query.filter(
                ((Message.sender_id == user.id) & (Message.receiver_id == product.seller_id)) |
                ((Message.sender_id == product.seller_id) & (Message.receiver_id == user.id))
            ).filter(Message.product_id == product.id).all()
            
            print(f"üìù –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {len(existing_messages)}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            print("\nüì§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            test_message = Message(
                sender_id=user.id,
                receiver_id=product.seller_id,
                product_id=product.id,
                content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏",
                is_read=False
            )
            
            db.session.add(test_message)
            db.session.commit()
            
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {test_message.id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ –∑–∞–ø—Ä–æ—Å–µ —á–∞—Ç–∞
            print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —á–∞—Ç–∞...")
            chat_messages = Message.query.filter(
                ((Message.sender_id == user.id) & (Message.receiver_id == product.seller_id)) |
                ((Message.sender_id == product.seller_id) & (Message.receiver_id == user.id))
            ).filter(Message.product_id == product.id).order_by(Message.created_at.asc()).all()
            
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∑–∞–ø—Ä–æ—Å–µ —á–∞—Ç–∞: {len(chat_messages)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ
            found_message = False
            for msg in chat_messages:
                if msg.id == test_message.id:
                    found_message = True
                    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ —á–∞—Ç–∞")
                    break
            
            if not found_message:
                print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ —á–∞—Ç–∞")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            print("\nüìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ:")
            for i, msg in enumerate(chat_messages, 1):
                sender = User.query.get(msg.sender_id)
                receiver = User.query.get(msg.receiver_id)
                print(f"   {i}. –û—Ç {sender.username} –∫ {receiver.username}: {msg.content}")
                print(f"      –í—Ä–µ–º—è: {msg.created_at.strftime('%H:%M')}, –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {msg.is_read}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            db.session.delete(test_message)
            db.session.commit()
            print("\n‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_chat_route_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞ —á–∞—Ç–∞"""
    print("\nüîç –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –º–∞—Ä—à—Ä—É—Ç–∞ —á–∞—Ç–∞")
    print("=" * 50)
    
    try:
        from app import app, db, User, Product, Message
        
        with app.app_context():
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä
            product = Product.query.first()
            if not product:
                print("‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.query.first()
            if not user:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            print(f"üì¶ –¢–æ–≤–∞—Ä: {product.name} (ID: {product.id})")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.id})")
            print(f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: {product.seller.username} (ID: {product.seller_id})")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞ chat_with_seller
            print("\nüîÑ –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –º–∞—Ä—à—Ä—É—Ç–∞...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            messages = Message.query.filter(
                ((Message.sender_id == user.id) & (Message.receiver_id == product.seller_id)) |
                ((Message.sender_id == product.seller_id) & (Message.receiver_id == user.id))
            ).filter(Message.product_id == product.id).order_by(Message.created_at.asc()).all()
            
            print(f"üìù –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            # –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            read_count = 0
            for message in messages:
                if message.receiver_id == user.id and not message.is_read:
                    message.is_read = True
                    read_count += 1
            
            if read_count > 0:
                db.session.commit()
                print(f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {read_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            print("\nüìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞:")
            print(f"   product.name: {product.name}")
            print(f"   product.seller.username: {product.seller.username}")
            print(f"   messages|length: {len(messages)}")
            
            if messages:
                print("   üìã –°–æ–æ–±—â–µ–Ω–∏—è:")
                for msg in messages:
                    sender = User.query.get(msg.sender_id)
                    print(f"      - {msg.sender.username}: {msg.content[:50]}...")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    delivery_ok = check_message_delivery()
    
    # –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —á–∞—Ç–∞
    route_ok = test_chat_route_simulation()
    
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {'‚úÖ' if delivery_ok else '‚ùå'}")
    print(f"   –ú–∞—Ä—à—Ä—É—Ç —á–∞—Ç–∞: {'‚úÖ' if route_ok else '‚ùå'}")
    
    if delivery_ok and route_ok:
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("\nüìã –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: http://localhost:5000")
        print("3. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")
        print("4. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Ç–æ–≤–∞—Ä—É")
        print("5. –ù–∞–∂–º–∏—Ç–µ 'üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É'")
        print("6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ (F12) –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        print("8. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É: python fix_message_table.py")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞")

if __name__ == "__main__":
    main()
